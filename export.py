from pathlib import Path
import re
from dataclasses import dataclass

export_file_re = re.compile(r"^\/\/\s*->\s+")
public_item_re = re.compile(
    r"^#let\s*\/\*\s*pub(?:\s+as\s+(?P<alias>[A-Za-z_][A-Za-z0-9\-_]*))?\s*\*\/\s*(?P<name>[A-Za-z_][A-Za-z0-9\-_]*)"
)
DIR = Path(__file__).parent if "__file__" in locals() else Path.cwd()


@dataclass
class PublicItem:
    name: str
    alias: str | None = None


if __name__ == "__main__":
    src_dir = DIR / "src"
    impl_dir = src_dir / "_impl"
    for source_file in impl_dir.glob("**/*.typ"):
        with source_file.open() as f:
            line = f.readline()
            if (match := export_file_re.match(line)) is None:
                continue

            export_file = src_dir / (line[match.end() :].strip())
            export_dir = export_file.parent
            export_dir.mkdir(exist_ok=True, parents=True)

            module_doc = ""
            while True:
                line = f.readline()
                if not line.startswith("///"):
                    break
                module_doc += line
            module_doc = module_doc.strip()

            public_items = []
            while True:
                match = public_item_re.match(line)
                if match is not None:
                    public_items.append(
                        PublicItem(name=match.group("name"), alias=match.group("alias"))
                    )
                line = f.readline()
                if len(line) == 0:
                    break

            source_file_relative = source_file.relative_to(export_dir, walk_up=True)
            print(
                f"exporting `{source_file.relative_to(DIR, walk_up=True).as_posix()}` "
                f"to `{export_file.relative_to(DIR, walk_up=True).as_posix()}`"
            )
            with export_file.open("w") as f:
                if len(module_doc) > 0:
                    f.write(module_doc)
                    f.write("\n\n")

                f.write(f'#import "{source_file_relative.as_posix()}": (\n')
                for public_item in public_items:
                    match public_item:
                        case PublicItem(name=name, alias=None):
                            f.write(f"  {name},\n")
                        case PublicItem(name=name, alias=alias):
                            f.write(f"  {name} as {alias},\n")
                f.write(")\n\n")
                f.write(
                    "// This is a program-generated file. Do not edit it directly.\n"
                )


################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
